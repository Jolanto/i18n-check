# SPDX-License-Identifier: GPL-3.0-or-later
"""
Generates a TypeScript file with the object i18nMap that maps all i18n keys as properties.
This allows type checking of all i18n keys to assure that they've been entered correctly.

Usage:
    python3 src/i18n_check/i18n_generate_map_object.py
"""

import json
import re

from i18n_check.utils import (
    i18n_map_file,
    i18n_src_file,
    read_json_file,
    spdx_license_identifier,
)

# MARK: Paths / Files

i18n_src_dict = read_json_file(i18n_src_file)

# MARK: Create Map


def _recursively_nest_dict(k: str, v: str | dict, output_dict: dict):
    """
    Recursively nests dictionaries.

    Parameters
    ----------
    k : str
        The key of a sub dictionary.

    v : str | dict
        The value of a nested dictionary.

    output_dict | dict
        The output_dict dictionary or sub-dictionary.
    """
    k, *rest = k.split(".", 1)
    if rest:
        _recursively_nest_dict(rest[0], v, output_dict.setdefault(k, {}))

    else:
        output_dict[k] = v


def nest_flat_dict(flat_dict: dict) -> dict:
    """
    Nest a flat dictionary.

    Parameters
    ----------
    flat_dict : dict
        A flattened dictionary that should be nested.

    Returns
    -------
    nested_dict : dict
        The nested version of the original flat dictionary.
    """
    nested_dict = {}
    for k, v in flat_dict.items():
        _recursively_nest_dict(k=k, v=v, output_dict=nested_dict)

    return nested_dict


i18n_map_dict = nest_flat_dict({k: k for k, _ in i18n_src_dict.items()})

# MARK: Write Map


with open(i18n_map_file, encoding="utf-8", mode="w") as f:
    if spdx_license_identifier:
        f.write(f"// SPDX-License-Identifier: {spdx_license_identifier}")
        f.write("\n// This file was automatically generated by i18n-check.")

    f.write(f"\nexport const i18nMap = {json.dumps(i18n_map_dict, indent=2)}")

# Rewrite to format the keys to not have quotes.
with open(i18n_map_file, encoding="utf-8", mode="r") as f:
    i18n_object = f.readlines()

with open(i18n_map_file, encoding="utf-8", mode="w") as f:
    for line in i18n_object:
        f.write(re.sub(r'"([^"]*)":', r"\1:", line))

print("The i18n-map.ts file with the i18nMap object has been successfully written to.")
